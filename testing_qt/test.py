# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from sheets_handler import Gspread_handler as gs
from sheets_handler import Main_sheet as ms
import threading
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(840, 465)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 851, 461))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.activate = QtWidgets.QPushButton(self.tab_3)
        self.activate.setGeometry(QtCore.QRect(10, 20, 75, 23))
        self.activate.setObjectName("activate")
        self.desactivate = QtWidgets.QPushButton(self.tab_3)
        self.desactivate.setGeometry(QtCore.QRect(90, 20, 75, 23))
        self.desactivate.setObjectName("desactivate")
        self.label = QtWidgets.QLabel(self.tab_3)
        self.label.setGeometry(QtCore.QRect(10, 50, 161, 20))
        self.label.setText("")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")

        self.spending_add = QtWidgets.QPushButton(self.tab_4)
        self.spending_add.setGeometry(QtCore.QRect(110, 160, 75, 23))
        self.spending_add.setObjectName("spending_add")

        self.spending_add.clicked.connect(self.fn_add_spending)
        self.spending_description = QtWidgets.QLineEdit(self.tab_4)
        self.spending_description.setGeometry(QtCore.QRect(120, 100, 221, 20))
        self.spending_description.setObjectName("spending_description")
        self.label_2 = QtWidgets.QLabel(self.tab_4)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 101, 20))
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.tab_4)
        self.label_3.setGeometry(QtCore.QRect(10, 100, 101, 20))
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.tab_4)
        self.label_4.setGeometry(QtCore.QRect(10, 130, 101, 20))
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.spending_amount = QtWidgets.QLineEdit(self.tab_4)
        self.spending_amount.setGeometry(QtCore.QRect(120, 130, 221, 20))
        self.spending_amount.setObjectName("spending_amount")
        self.spending_category = QtWidgets.QComboBox(self.tab_4)
        self.spending_category.setGeometry(QtCore.QRect(120, 70, 221, 22))
        self.spending_category.setObjectName("spending_category")
        self.spending_category.addItem("")
        self.spending_category.setItemText(0, "")
        self.spending_category.addItem("")
        self.spending_category.addItem("")
        self.spending_category.addItem("")
        self.spending_category.addItem("")
        self.spending_category.addItem("")
        self.spending_category.addItem("")
        self.spending_category.addItem("")
        self.spending_category.addItem("")

        self.spending_modify = QtWidgets.QPushButton(self.tab_4)
        self.spending_modify.setGeometry(QtCore.QRect(190, 160, 75, 23))
        self.spending_modify.setObjectName("spending_modify")
        self.spending_modify.clicked.connect(self.modify)
        self.spending_modify.setEnabled(False)

        self.spending_delete = QtWidgets.QPushButton(self.tab_4)
        self.spending_delete.setGeometry(QtCore.QRect(270, 160, 75, 23))
        self.spending_delete.setObjectName("spending_delete")
        self.spending_delete.clicked.connect(self.delete)
        self.spending_delete.setEnabled(False)

        self.label_5 = QtWidgets.QLabel(self.tab_4)
        self.label_5.setGeometry(QtCore.QRect(420, 60, 391, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setMouseTracking(False)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.line = QtWidgets.QFrame(self.tab_4)
        self.line.setGeometry(QtCore.QRect(380, 70, 20, 331))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.spending_warning = QtWidgets.QLabel(self.tab_4)
        self.spending_warning.setGeometry(QtCore.QRect(120, 180, 211, 31))
        self.spending_forward = QtWidgets.QPushButton(self.tab_4)
        self.spending_forward.setGeometry(QtCore.QRect(610, 380, 41, 23))
        self.spending_forward.setObjectName("spending_forward")
        self.spending_back = QtWidgets.QPushButton(self.tab_4)
        self.spending_back.setGeometry(QtCore.QRect(550, 380, 41, 23))
        self.spending_back.setObjectName("spending_back")
        self.spending_table = QtWidgets.QTableWidget(self.tab_4)
        self.spending_table.setGeometry(QtCore.QRect(420, 100, 391, 271))
        self.spending_table.setObjectName("spending_table")
        self.spending_table.setColumnCount(0)
        self.spending_table.setRowCount(0)

    
        self.spending_table.itemSelectionChanged.connect(self.on_selec_change)

        self.spending_calendary = QtWidgets.QCalendarWidget(self.tab_4)
        self.spending_calendary.setGeometry(QtCore.QRect(30, 210, 331, 191))
        self.spending_calendary.setObjectName("spending_calendary")
        self.label_6 = QtWidgets.QLabel(self.tab_4)
        self.label_6.setGeometry(QtCore.QRect(20, 20, 281, 31))
        self.label_6.setObjectName("label_6")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.tabWidget.addTab(self.tab_5, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        #####
        self.sheet = gs()
        self.main = ms()
        self.data = self.sheet.load_data()
        self.items = len(self.data) + 1
        self.table_handler()
        #####

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.activate.setText(_translate("MainWindow", "Activar"))
        self.desactivate.setText(_translate("MainWindow", "Desactivar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Tab 1"))
        self.spending_add.setText(_translate("MainWindow", "Add"))
        self.label_2.setText(_translate("MainWindow", "Categoria"))
        self.label_3.setText(_translate("MainWindow", "DescripciÃ³n"))
        self.label_4.setText(_translate("MainWindow", "Monto"))

        self.categories = ["Ropa","Viajes","Transporte","Comida","Salud","Entretenimiento","Salidas","Ingresos"]
        for num, cat in enumerate(self.categories):
            self.spending_category.setItemText(num+1, _translate("MainWindow", cat))
        index = self.spending_category.findText("Ropa", QtCore.Qt.MatchFixedString)

        self.spending_category.setCurrentIndex(index)
        self.spending_modify.setText(_translate("MainWindow", "Modify"))
        self.spending_delete.setText(_translate("MainWindow", "Delete"))
        self.label_5.setText(_translate("MainWindow", "Agosto 2021"))
        self.spending_forward.setText(_translate("MainWindow", "--->"))
        self.spending_back.setText(_translate("MainWindow", "<--"))
        self.label_6.setText(_translate("MainWindow", "Agregar Gastos"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Tab 2"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Page"))

     
    def on_selec_change(self):
        """ Selected cell handler - fill inputs """
        
        self.spending_modify.setEnabled(True)
        self.spending_delete.setEnabled(True)

        row = self.spending_table.currentRow()
        print("selected",row)
        print(self.data)
        data = self.data[row]
        d,m,y = [int(x) for x in data[0].split("/")]
        date = QDate(y,m,d)
        self.spending_calendary.setSelectedDate(date)
        self.spending_category.setCurrentIndex(self.categories.index(data[1])+1)
        self.spending_description.setText(data[2])
        self.spending_amount.setText(data[3])
        self.row = row
        

    def fn_add_spending(self):
        """ Add new spending to the list """
        calendary = self.spending_calendary.selectedDate()
        calendary = f"{calendary.day()}/{calendary.month()}/{calendary.year()}"
        category = self.spending_category.currentText()
        description = self.spending_description.text()
        amount = self.spending_amount.text()

        
        self.spending_warning.setText("")
        self.data.append([calendary,category,description,amount])
        self.table_handler()

        self.sheet.update_sheet(self.data)

        if 0:
            self.spending_warning.setText("Datos invalidos. Intenta de nuevo")

        self.spending_description.setText("")
        self.spending_amount.setText("")
    
    def delete(self):
        self.spending_table.removeRow(self.spending_table.currentRow())
        deleted = self.data.pop(self.row+1)
        self.sheet.tab.clear()

        sp = float(deleted[-1])
        if deleted[1] == "Ingresos":
            self.income -= sp
        else:
            self.spendings -= sp

        self.headers()
        self.sheet.update_sheet(self.data)
        print("delete",deleted)
    
    def modify(self):
        #data = self.data[row]
        print(self.row)
        items = [
            self.spending_calendary.selectedDate().toString("dd/MM/yyyy"),
            self.spending_category.currentText(),
            self.spending_description.text(),
            self.spending_amount.text()
        ]
        print(items)
        
        for num,value in enumerate(items):
            self.spending_table.setItem(self.row,num,QTableWidgetItem(value))
        
        self.data[self.row] = items
        print(self.data)
        t = threading.Thread(target = lambda:self.sheet.update_sheet(self.data)).start()


        print("modified")

    def table_handler(self):
        """ Update table with data information """
        self.spending_table.setRowCount(len(self.data))
        self.spending_table.setColumnCount(4)
        self.spending_table.setHorizontalHeaderLabels(["Fecha","CategorÃ­a","DescripciÃ³n","Monto"])
        count_k, count_v = 0,0
        self.spendings, self.income = 0,0
        for k in self.data:
            row = k
            amount = float(row[3])

            for v in row:
                #print(v,end="")
                v = amount if count_v == 3 else v
                print(count_k,count_v,v,end="  ")
                self.spending_table.setItem(count_k,count_v,QTableWidgetItem(v))
                count_v += 1

            if row[1] == "Ingresos":
                self.income += amount
            else:
                self.spendings += amount
            count_v = 0
            count_k += 1
            print()
        
        print(self.spendings,self.income)
        #
        self.headers()
        t = threading.Thread(target = lambda:self.main.update_spending_sheet(self.spendings,self.income)).start()
        #81.25,390
        

    def headers(self):
        self.main.update_month(2021,9)
        self.sheet.update_cell("F1","GASTOS:")
        self.sheet.update_cell("G1",self.spendings)
        self.sheet.update_cell("F2","INGRESOS:")
        self.sheet.update_cell("G2",self.income)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
